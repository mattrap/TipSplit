name: Build Windows Installer

on:
  push:
    tags:
      - 'v*'            # build when you push/ create a tag like v1.0.4

permissions:
  contents: write       # allow attaching files to the Release

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Read version from version.py
        id: v
        shell: pwsh
        run: |
          $c = Get-Content -Raw version.py
          if ($c -match 'APP_VERSION\s*=\s*"([0-9\.]+)"') {
            "ver=$($Matches[1])" >> $env:GITHUB_OUTPUT
          } else {
            throw "APP_VERSION not found in version.py"
          }

      # Prepare a clean bundle layout:
      # - Move premade employee JSONs into templates/ (bundled in the EXE)
      # - Ensure assets/ is present (icons, splash, etc.)
      - name: Prepare bundle layout (templates, assets)
        shell: pwsh
        run: |
          if (!(Test-Path -LiteralPath "templates")) { New-Item -ItemType Directory -Path "templates" | Out-Null }
          Copy-Item -LiteralPath "service_employees.json" -Destination "templates\service_employees.json" -Force
          Copy-Item -LiteralPath "bussboy_employees.json" -Destination "templates\bussboy_employees.json" -Force

          if (!(Test-Path -LiteralPath "assets")) {
            Write-Host "No assets/ folder found â€” continuing."
          }

      - name: Build EXE (PyInstaller)
        shell: pwsh
        run: |
          # On Windows, --add-data uses "SRC;DEST"
          # Bundle templates/ so first-run can copy them into the user's backend dir.
          # Bundle assets/ (icons, images, splash).
          pyinstaller --noconsole --name TipSplit `
            --add-data "templates;templates" `
            --add-data "assets;assets" `
            MainApp.py

      - name: Install Inno Setup
        shell: pwsh
        run: choco install innosetup --no-progress -y

      - name: Compile installer (Inno Setup)
        shell: pwsh
        run: |
          $iscc = "C:\Program Files (x86)\Inno Setup 6\ISCC.exe"
          # /O sets output dir to dist/installer, so the next step can upload it
          & $iscc "/DMyAppVersion=${{ steps.v.outputs.ver }}" "/Odist/installer" installer.iss

      - name: Upload installer artifact
        uses: actions/upload-artifact@v4
        with:
          name: TipSplit-Setup
          path: dist/installer/TipSplit-Setup-${{ steps.v.outputs.ver }}.exe

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: TipSplit-Setup
          path: .

      - name: Attach to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: TipSplit-Setup-*.exe
          draft: false
          prerelease: false
